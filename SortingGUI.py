#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.2
#  in conjunction with Tcl version 8.6
#    May 09, 2020 06:19:18 PM -04  platform: Windows NT



try:
    from tkinter import *
    from random import *
    from datetime import datetime
    from Graph import*
    from SortingAlgos import *
    from InfoWin import *
except ImportError:
    from tkinter import *
    from random import *
    from SortingAlgos import *
    from InfoWin import *

try:
    from tkinter import ttk

    py3 = False
except ImportError:
    from tkinter import ttk

    py3 = True

import support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.iconbitmap('icon.ico')
    support.set_Tk_var()
    top = Toplevel(root)
    support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    # rt = root
    root = rt
    w = Toplevel(root)
    support.set_Tk_var()
    top = Toplevel(w)
    support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel():
    '''Destroys the Toplevel window'''
    global w
    w.destroy()
    w = None


class Toplevel:
    __data = []
    __min = 1
    __sort = ''
    __speed = 1

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        self.colors = []

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("943x643+460+128")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(0, 0)
        top.title("Sorting Animation GUI")
        top.configure(background="#2980B9")

        self.Animation_Canvas = Canvas(top)
        self.Animation_Canvas.place(relx=0.042, rely=0.249, relheight=0.689, relwidth=0.914)
        self.Animation_Canvas.configure(background="#1a1a1a", borderwidth="8", highlightbackground="#ffffff",
                                        insertbackground="black", relief="ridge", selectbackground="#c4c4c4",
                                        selectforeground="black")

        self.Control_Panel = Canvas(top)
        self.Control_Panel.place(relx=0.042, rely=0.031, relheight=0.176, relwidth=0.914)
        self.Control_Panel.configure(background="#34495E", borderwidth="5", insertbackground="black",
                                     relief="ridge", selectbackground="#c4c4c4", selectforeground="black")

        self.Algorithms = ttk.Combobox(self.Control_Panel)
        self.Algorithms.place(relx=0.348, rely=0.177, relheight=0.23, relwidth=0.31)
        self.value_list = ['Bubble Sort', 'Insertion Sort', 'Selection Sort',
                           'Even-Odd Sort', 'Bogo Sort',
                           'Gnome Sort','Cycle Sort', 'Shell Sort',
                            'Cocktail Shaker Sort', 'Comb Sort','Pigeon Sort']
        self.Algorithms.configure(background='#000000', values=self.value_list)
        self.Algorithms.current(0)

        self.Sort_Button = Button(self.Control_Panel,state='active',command=self.Sort_option)
        self.Sort_Button.place(relx=0.348, rely=0.531, height=33, width=68)
        self.Sort_Button.configure(activebackground="#ececec", activeforeground="#000000", background="#3c9cdd",
                                   cursor="hand2", disabledforeground="#a3a3a3", foreground="#ffffff",
                                   highlightbackground="#d9d9d9", highlightcolor="black", pady="0", text='''Sort''')

        self.Random_Button = Button(self.Control_Panel,state='active',command=self.generateData)
        self.Random_Button.place(relx=0.464, rely=0.531, height=33, width=68)
        self.Random_Button.configure(activebackground="#ececec", activeforeground="#000000", background="#3c9cdd",
                                     cursor="hand2", disabledforeground="#a3a3a3", foreground="#ffffff",
                                     highlightbackground="#d9d9d9", highlightcolor="black", pady="0", text='''Random''')

        self.Info_Button = Button(self.Control_Panel,state='active', command=self.openInfo)
        self.Info_Button.place(relx=0.58, rely=0.531, height=33, width=68)
        self.Info_Button.configure(activebackground="#ececec", activeforeground="#000000", background="#3c9cdd",
                                   cursor="hand2", disabledforeground="#a3a3a3", foreground="#ffffff",
                                   highlightbackground="#d9d9d9", highlightcolor="black", pady="0", text='''Info''')

        self.Num_of_elements = Scale(self.Control_Panel, from_=10.0, to=100.0)
        self.Num_of_elements.place(relx=0.046, rely=0.442, relwidth=0.216,
                                   relheight=0.0, height=47, bordermode='ignore')
        self.Num_of_elements.configure(activebackground="#ffffff", background="#3c9cdd", cursor="hand2", digits="1",
                                       foreground="#ffffff", highlightbackground="#2283c3", highlightcolor="black",
                                       length="90", orient="horizontal", relief="raised", troughcolor="#7dbde8")

        self.Label_of_NOE = Label(self.Control_Panel)
        self.Label_of_NOE.place(relx=0.07, rely=0.177, height=26, width=142)
        self.Label_of_NOE.configure(background="#1a1a1a", disabledforeground="#a3a3a3", foreground="#ffffff",
                                    text='''Num Of Elements''')

        self.Speed = Scale(self.Control_Panel, from_=1.0, to=200.0)
        self.Speed.place(relx=0.731, rely=0.442, relwidth=0.216,
                         relheight=0.0, height=47, bordermode='ignore')
        self.Speed.configure(activebackground="#ececec", background="#3c9cdd", cursor="hand2", digits="2",
                             foreground="#ffffff", highlightbackground="#2283c3", highlightcolor="black",
                             length="5", orient="horizontal", relief="raised", troughcolor="#7dbde8")

        self.Label_of_Speed = Label(self.Control_Panel)
        self.Label_of_Speed.place(relx=0.754, rely=0.177, height=26, width=144)
        self.Label_of_Speed.configure(background="#1a1a1a", disabledforeground="#a3a3a3", foreground="#ffffff",
                                      text='''Speed''')
        self.generateData()

    def __disableButtons(self):
        """Disables all buttons on the application"""
        self.Sort_Button.configure(state='disable')
        self.Random_Button.configure(state='disable')
        self.Info_Button.configure(state='disable')
        
    def __activeButtons(self):
        '''Activates all buttons on the application'''
        self.Sort_Button.configure(state='active')
        self.Random_Button.configure(state='active')
        self.Info_Button.configure(state='active')
        
    def timea(self,startTime):
        '''Draws time taken by algorithm on the canvas'''
        self.timeTaken = datetime.now() - startTime
        self.Animation_Canvas.create_text(110,40,fill='white',font='Times 12 italic bold',
                                          text='Time to sort: '+str(self.timeTaken)+'\nSpeed: '+str(self.__speed)+'\nElements: '+str(self.Num_of_elements.get()))
    def generateData(self):
        """Generates a random data from 1 to the value especified in the number of elements"""
        self.__data = []
        self.Bars = Bars(self.Animation_Canvas, self.__data)
        maxValue = self.Num_of_elements.get()
        self.__data.extend(range(1,maxValue+1))
        shuffle(self.__data)
        self.colors = ['white'] * len(self.__data)
        self.Bars.drawData(self.colors)

    def openInfo(self):
        '''Generates a window with information of the chosen sorting algorithm when the Info button is clicked'''
        infoWin = InfoWin(self.Algorithms.get())

    def Sort_option(self):
        """Compare the string vlue of the combox to use a specific sort Algorithms"""
        self.__disableButtons()
        self.__sort = self.Algorithms.get()
        self.__speed = self.Speed.get()
        self.Sort = SortingAlgos(self.Bars,self.__data, self.colors,self.__speed)

        if self.__sort == self.value_list[0]:
            startTime=datetime.now()
            self.Sort.bubble_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[1]:
            startTime = datetime.now()
            self.Sort.insertion_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[2]:
            startTime = datetime.now()
            self.Sort.selection_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[3]:
            startTime = datetime.now()
            self.Sort.even_odd_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[4]:
            startTime = datetime.now()
            self.Sort.bogo_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[5]:
            startTime = datetime.now()
            self.Sort.gnome_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[6]:
            startTime = datetime.now()
            self.Sort.cycle_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[7]:
            startTime = datetime.now()
            self.Sort.shell_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[8]:
            startTime = datetime.now()
            self.Sort.cocktail_shaker_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[9]:
            startTime = datetime.now()
            self.Sort.comb_sort()
            self.timea(startTime)

        elif self.__sort == self.value_list[10]:
            startTime = datetime.now()
            self.Sort.pigeon_sort()
            self.timea(startTime)
            
        self.__activeButtons()



if __name__ == '__main__':
    vp_start_gui()
